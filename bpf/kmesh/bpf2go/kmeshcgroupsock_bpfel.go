// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64 || amd64p32 || arm || arm64 || mips64le || mips64p32le || mipsle || ppc64le || riscv64
// +build 386 amd64 amd64p32 arm arm64 mips64le mips64p32le mipsle ppc64le riscv64

package bpf2go

import (
    "bytes"
    _ "embed"
    "fmt"
    "io"

    "github.com/cilium/ebpf"
)

// LoadKmeshCgroupSock returns the embedded CollectionSpec for KmeshCgroupSock.
func LoadKmeshCgroupSock() (*ebpf.CollectionSpec, error) {
    reader := bytes.NewReader(_KmeshCgroupSockBytes)
    spec, err := ebpf.LoadCollectionSpecFromReader(reader)
    if err != nil {
        return nil, fmt.Errorf("can't load KmeshCgroupSock: %w", err)
    }

    return spec, err
}

// LoadKmeshCgroupSockObjects loads KmeshCgroupSock and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *KmeshCgroupSockObjects
//     *KmeshCgroupSockPrograms
//     *KmeshCgroupSockMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshCgroupSockObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
    spec, err := LoadKmeshCgroupSock()
    if err != nil {
        return err
    }

    return spec.LoadAndAssign(obj, opts)
}

// KmeshCgroupSockSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshCgroupSockSpecs struct {
    KmeshCgroupSockProgramSpecs
    KmeshCgroupSockMapSpecs
}

// KmeshCgroupSockSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshCgroupSockProgramSpecs struct {
    SockConnect4 *ebpf.ProgramSpec `ebpf:"sock_connect4"`
}

// KmeshCgroupSockMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshCgroupSockMapSpecs struct {
    KmeshListener     *ebpf.MapSpec `ebpf:"kmesh_listener"`
    KmeshTailCallCtx  *ebpf.MapSpec `ebpf:"kmesh_tail_call_ctx"`
    KmeshTailCallProg *ebpf.MapSpec `ebpf:"kmesh_tail_call_prog"`
    OuterMap          *ebpf.MapSpec `ebpf:"outer_map"`
}

// KmeshCgroupSockObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshCgroupSockObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshCgroupSockObjects struct {
    KmeshCgroupSockPrograms
    KmeshCgroupSockMaps
}

func (o *KmeshCgroupSockObjects) Close() error {
    return _KmeshCgroupSockClose(
        &o.KmeshCgroupSockPrograms,
        &o.KmeshCgroupSockMaps,
    )
}

// KmeshCgroupSockMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshCgroupSockObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshCgroupSockMaps struct {
    KmeshListener     *ebpf.Map `ebpf:"kmesh_listener"`
    KmeshTailCallCtx  *ebpf.Map `ebpf:"kmesh_tail_call_ctx"`
    KmeshTailCallProg *ebpf.Map `ebpf:"kmesh_tail_call_prog"`
    OuterMap          *ebpf.Map `ebpf:"outer_map"`
}

func (m *KmeshCgroupSockMaps) Close() error {
    return _KmeshCgroupSockClose(
        m.KmeshListener,
        m.KmeshTailCallCtx,
        m.KmeshTailCallProg,
        m.OuterMap,
    )
}

// KmeshCgroupSockPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshCgroupSockObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshCgroupSockPrograms struct {
    SockConnect4 *ebpf.Program `ebpf:"sock_connect4"`
}

func (p *KmeshCgroupSockPrograms) Close() error {
    return _KmeshCgroupSockClose(
        p.SockConnect4,
    )
}

func _KmeshCgroupSockClose(closers ...io.Closer) error {
    for _, closer := range closers {
        if err := closer.Close(); err != nil {
            return err
        }
    }
    return nil
}

// Do not access this directly.
//go:embed kmeshcgroupsock_bpfel.o
var _KmeshCgroupSockBytes []byte
