// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package bpf2go

import (
    "bytes"
    _ "embed"
    "fmt"
    "io"

    "github.com/cilium/ebpf"
)

// LoadKmeshCluster returns the embedded CollectionSpec for KmeshCluster.
func LoadKmeshCluster() (*ebpf.CollectionSpec, error) {
    reader := bytes.NewReader(_KmeshClusterBytes)
    spec, err := ebpf.LoadCollectionSpecFromReader(reader)
    if err != nil {
        return nil, fmt.Errorf("can't load KmeshCluster: %w", err)
    }

    return spec, err
}

// LoadKmeshClusterObjects loads KmeshCluster and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *KmeshClusterObjects
//     *KmeshClusterPrograms
//     *KmeshClusterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshClusterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
    spec, err := LoadKmeshCluster()
    if err != nil {
        return err
    }

    return spec.LoadAndAssign(obj, opts)
}

// KmeshClusterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshClusterSpecs struct {
    KmeshClusterProgramSpecs
    KmeshClusterMapSpecs
}

// KmeshClusterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshClusterProgramSpecs struct {
    ClusterManager *ebpf.ProgramSpec `ebpf:"cluster_manager"`
}

// KmeshClusterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshClusterMapSpecs struct {
    KmeshCluster      *ebpf.MapSpec `ebpf:"kmesh_cluster"`
    KmeshTailCallCtx  *ebpf.MapSpec `ebpf:"kmesh_tail_call_ctx"`
    KmeshTailCallProg *ebpf.MapSpec `ebpf:"kmesh_tail_call_prog"`
    MapOfClusterEps   *ebpf.MapSpec `ebpf:"map_of_cluster_eps"`
    OuterMap          *ebpf.MapSpec `ebpf:"outer_map"`
}

// KmeshClusterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshClusterObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshClusterObjects struct {
    KmeshClusterPrograms
    KmeshClusterMaps
}

func (o *KmeshClusterObjects) Close() error {
    return _KmeshClusterClose(
        &o.KmeshClusterPrograms,
        &o.KmeshClusterMaps,
    )
}

// KmeshClusterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshClusterObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshClusterMaps struct {
    KmeshCluster      *ebpf.Map `ebpf:"kmesh_cluster"`
    KmeshTailCallCtx  *ebpf.Map `ebpf:"kmesh_tail_call_ctx"`
    KmeshTailCallProg *ebpf.Map `ebpf:"kmesh_tail_call_prog"`
    MapOfClusterEps   *ebpf.Map `ebpf:"map_of_cluster_eps"`
    OuterMap          *ebpf.Map `ebpf:"outer_map"`
}

func (m *KmeshClusterMaps) Close() error {
    return _KmeshClusterClose(
        m.KmeshCluster,
        m.KmeshTailCallCtx,
        m.KmeshTailCallProg,
        m.MapOfClusterEps,
        m.OuterMap,
    )
}

// KmeshClusterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshClusterObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshClusterPrograms struct {
    ClusterManager *ebpf.Program `ebpf:"cluster_manager"`
}

func (p *KmeshClusterPrograms) Close() error {
    return _KmeshClusterClose(
        p.ClusterManager,
    )
}

func _KmeshClusterClose(closers ...io.Closer) error {
    for _, closer := range closers {
        if err := closer.Close(); err != nil {
            return err
        }
    }
    return nil
}

// Do not access this directly.
//go:embed kmeshcluster_bpfeb.o
var _KmeshClusterBytes []byte
