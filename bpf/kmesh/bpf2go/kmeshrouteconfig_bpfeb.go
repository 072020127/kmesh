// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package bpf2go

import (
    "bytes"
    _ "embed"
    "fmt"
    "io"

    "github.com/cilium/ebpf"
)

// LoadKmeshRouteConfig returns the embedded CollectionSpec for KmeshRouteConfig.
func LoadKmeshRouteConfig() (*ebpf.CollectionSpec, error) {
    reader := bytes.NewReader(_KmeshRouteConfigBytes)
    spec, err := ebpf.LoadCollectionSpecFromReader(reader)
    if err != nil {
        return nil, fmt.Errorf("can't load KmeshRouteConfig: %w", err)
    }

    return spec, err
}

// LoadKmeshRouteConfigObjects loads KmeshRouteConfig and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *KmeshRouteConfigObjects
//     *KmeshRouteConfigPrograms
//     *KmeshRouteConfigMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshRouteConfigObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
    spec, err := LoadKmeshRouteConfig()
    if err != nil {
        return err
    }

    return spec.LoadAndAssign(obj, opts)
}

// KmeshRouteConfigSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshRouteConfigSpecs struct {
    KmeshRouteConfigProgramSpecs
    KmeshRouteConfigMapSpecs
}

// KmeshRouteConfigSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshRouteConfigProgramSpecs struct {
    RouteConfigManager *ebpf.ProgramSpec `ebpf:"route_config_manager"`
}

// KmeshRouteConfigMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshRouteConfigMapSpecs struct {
    KmeshTailCallCtx  *ebpf.MapSpec `ebpf:"kmesh_tail_call_ctx"`
    KmeshTailCallProg *ebpf.MapSpec `ebpf:"kmesh_tail_call_prog"`
    MapOfRouterConfig *ebpf.MapSpec `ebpf:"map_of_router_config"`
    OuterMap          *ebpf.MapSpec `ebpf:"outer_map"`
}

// KmeshRouteConfigObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshRouteConfigObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshRouteConfigObjects struct {
    KmeshRouteConfigPrograms
    KmeshRouteConfigMaps
}

func (o *KmeshRouteConfigObjects) Close() error {
    return _KmeshRouteConfigClose(
        &o.KmeshRouteConfigPrograms,
        &o.KmeshRouteConfigMaps,
    )
}

// KmeshRouteConfigMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshRouteConfigObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshRouteConfigMaps struct {
    KmeshTailCallCtx  *ebpf.Map `ebpf:"kmesh_tail_call_ctx"`
    KmeshTailCallProg *ebpf.Map `ebpf:"kmesh_tail_call_prog"`
    MapOfRouterConfig *ebpf.Map `ebpf:"map_of_router_config"`
    OuterMap          *ebpf.Map `ebpf:"outer_map"`
}

func (m *KmeshRouteConfigMaps) Close() error {
    return _KmeshRouteConfigClose(
        m.KmeshTailCallCtx,
        m.KmeshTailCallProg,
        m.MapOfRouterConfig,
        m.OuterMap,
    )
}

// KmeshRouteConfigPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshRouteConfigObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshRouteConfigPrograms struct {
    RouteConfigManager *ebpf.Program `ebpf:"route_config_manager"`
}

func (p *KmeshRouteConfigPrograms) Close() error {
    return _KmeshRouteConfigClose(
        p.RouteConfigManager,
    )
}

func _KmeshRouteConfigClose(closers ...io.Closer) error {
    for _, closer := range closers {
        if err := closer.Close(); err != nil {
            return err
        }
    }
    return nil
}

// Do not access this directly.
//go:embed kmeshrouteconfig_bpfeb.o
var _KmeshRouteConfigBytes []byte
