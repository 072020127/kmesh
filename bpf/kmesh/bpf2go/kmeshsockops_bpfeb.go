// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package bpf2go

import (
    "bytes"
    _ "embed"
    "fmt"
    "io"

    "github.com/cilium/ebpf"
)

// LoadKmeshSockops returns the embedded CollectionSpec for KmeshSockops.
func LoadKmeshSockops() (*ebpf.CollectionSpec, error) {
    reader := bytes.NewReader(_KmeshSockopsBytes)
    spec, err := ebpf.LoadCollectionSpecFromReader(reader)
    if err != nil {
        return nil, fmt.Errorf("can't load KmeshSockops: %w", err)
    }

    return spec, err
}

// LoadKmeshSockopsObjects loads KmeshSockops and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *KmeshSockopsObjects
//     *KmeshSockopsPrograms
//     *KmeshSockopsMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshSockopsObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
    spec, err := LoadKmeshSockops()
    if err != nil {
        return err
    }

    return spec.LoadAndAssign(obj, opts)
}

// KmeshSockopsSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshSockopsSpecs struct {
    KmeshSockopsProgramSpecs
    KmeshSockopsMapSpecs
}

// KmeshSockopsSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshSockopsProgramSpecs struct {
    SockopsProg *ebpf.ProgramSpec `ebpf:"sockops_prog"`
}

// KmeshSockopsMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshSockopsMapSpecs struct {
    KmeshListener     *ebpf.MapSpec `ebpf:"kmesh_listener"`
    KmeshTailCallCtx  *ebpf.MapSpec `ebpf:"kmesh_tail_call_ctx"`
    KmeshTailCallProg *ebpf.MapSpec `ebpf:"kmesh_tail_call_prog"`
    OuterMap          *ebpf.MapSpec `ebpf:"outer_map"`
}

// KmeshSockopsObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshSockopsObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshSockopsObjects struct {
    KmeshSockopsPrograms
    KmeshSockopsMaps
}

func (o *KmeshSockopsObjects) Close() error {
    return _KmeshSockopsClose(
        &o.KmeshSockopsPrograms,
        &o.KmeshSockopsMaps,
    )
}

// KmeshSockopsMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshSockopsObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshSockopsMaps struct {
    KmeshListener     *ebpf.Map `ebpf:"kmesh_listener"`
    KmeshTailCallCtx  *ebpf.Map `ebpf:"kmesh_tail_call_ctx"`
    KmeshTailCallProg *ebpf.Map `ebpf:"kmesh_tail_call_prog"`
    OuterMap          *ebpf.Map `ebpf:"outer_map"`
}

func (m *KmeshSockopsMaps) Close() error {
    return _KmeshSockopsClose(
        m.KmeshListener,
        m.KmeshTailCallCtx,
        m.KmeshTailCallProg,
        m.OuterMap,
    )
}

// KmeshSockopsPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshSockopsObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshSockopsPrograms struct {
    SockopsProg *ebpf.Program `ebpf:"sockops_prog"`
}

func (p *KmeshSockopsPrograms) Close() error {
    return _KmeshSockopsClose(
        p.SockopsProg,
    )
}

func _KmeshSockopsClose(closers ...io.Closer) error {
    for _, closer := range closers {
        if err := closer.Close(); err != nil {
            return err
        }
    }
    return nil
}

// Do not access this directly.
//go:embed kmeshsockops_bpfeb.o
var _KmeshSockopsBytes []byte
