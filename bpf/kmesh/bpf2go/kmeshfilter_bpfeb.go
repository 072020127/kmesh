// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package bpf2go

import (
    "bytes"
    _ "embed"
    "fmt"
    "io"

    "github.com/cilium/ebpf"
)

// LoadKmeshFilter returns the embedded CollectionSpec for KmeshFilter.
func LoadKmeshFilter() (*ebpf.CollectionSpec, error) {
    reader := bytes.NewReader(_KmeshFilterBytes)
    spec, err := ebpf.LoadCollectionSpecFromReader(reader)
    if err != nil {
        return nil, fmt.Errorf("can't load KmeshFilter: %w", err)
    }

    return spec, err
}

// LoadKmeshFilterObjects loads KmeshFilter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *KmeshFilterObjects
//     *KmeshFilterPrograms
//     *KmeshFilterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadKmeshFilterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
    spec, err := LoadKmeshFilter()
    if err != nil {
        return err
    }

    return spec.LoadAndAssign(obj, opts)
}

// KmeshFilterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshFilterSpecs struct {
    KmeshFilterProgramSpecs
    KmeshFilterMapSpecs
}

// KmeshFilterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshFilterProgramSpecs struct {
    FilterChainManager *ebpf.ProgramSpec `ebpf:"filter_chain_manager"`
    FilterManager      *ebpf.ProgramSpec `ebpf:"filter_manager"`
}

// KmeshFilterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type KmeshFilterMapSpecs struct {
    KmeshTailCallCtx  *ebpf.MapSpec `ebpf:"kmesh_tail_call_ctx"`
    KmeshTailCallProg *ebpf.MapSpec `ebpf:"kmesh_tail_call_prog"`
    OuterMap          *ebpf.MapSpec `ebpf:"outer_map"`
}

// KmeshFilterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshFilterObjects struct {
    KmeshFilterPrograms
    KmeshFilterMaps
}

func (o *KmeshFilterObjects) Close() error {
    return _KmeshFilterClose(
        &o.KmeshFilterPrograms,
        &o.KmeshFilterMaps,
    )
}

// KmeshFilterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshFilterMaps struct {
    KmeshTailCallCtx  *ebpf.Map `ebpf:"kmesh_tail_call_ctx"`
    KmeshTailCallProg *ebpf.Map `ebpf:"kmesh_tail_call_prog"`
    OuterMap          *ebpf.Map `ebpf:"outer_map"`
}

func (m *KmeshFilterMaps) Close() error {
    return _KmeshFilterClose(
        m.KmeshTailCallCtx,
        m.KmeshTailCallProg,
        m.OuterMap,
    )
}

// KmeshFilterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadKmeshFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type KmeshFilterPrograms struct {
    FilterChainManager *ebpf.Program `ebpf:"filter_chain_manager"`
    FilterManager      *ebpf.Program `ebpf:"filter_manager"`
}

func (p *KmeshFilterPrograms) Close() error {
    return _KmeshFilterClose(
        p.FilterChainManager,
        p.FilterManager,
    )
}

func _KmeshFilterClose(closers ...io.Closer) error {
    for _, closer := range closers {
        if err := closer.Close(); err != nil {
            return err
        }
    }
    return nil
}

// Do not access this directly.
//go:embed kmeshfilter_bpfeb.o
var _KmeshFilterBytes []byte
