// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64be || armbe || mips || mips64 || mips64p32 || ppc64 || s390 || s390x || sparc || sparc64
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package bpf2go

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadTcXdpRevnat returns the embedded CollectionSpec for TcXdpRevnat.
func LoadTcXdpRevnat() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_TcXdpRevnatBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load TcXdpRevnat: %w", err)
	}

	return spec, err
}

// LoadTcXdpRevnatObjects loads TcXdpRevnat and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *TcXdpRevnatObjects
//     *TcXdpRevnatPrograms
//     *TcXdpRevnatMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadTcXdpRevnatObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadTcXdpRevnat()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// TcXdpRevnatSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TcXdpRevnatSpecs struct {
	TcXdpRevnatProgramSpecs
	TcXdpRevnatMapSpecs
}

// TcXdpRevnatSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TcXdpRevnatProgramSpecs struct {
	TcXdpRevNat *ebpf.ProgramSpec `ebpf:"tc_xdp_rev_nat"`
}

// TcXdpRevnatMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type TcXdpRevnatMapSpecs struct {
	TupleCt *ebpf.MapSpec `ebpf:"tuple_ct"`
}

// TcXdpRevnatObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadTcXdpRevnatObjects or ebpf.CollectionSpec.LoadAndAssign.
type TcXdpRevnatObjects struct {
	TcXdpRevnatPrograms
	TcXdpRevnatMaps
}

func (o *TcXdpRevnatObjects) Close() error {
	return _TcXdpRevnatClose(
		&o.TcXdpRevnatPrograms,
		&o.TcXdpRevnatMaps,
	)
}

// TcXdpRevnatMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadTcXdpRevnatObjects or ebpf.CollectionSpec.LoadAndAssign.
type TcXdpRevnatMaps struct {
	TupleCt *ebpf.Map `ebpf:"tuple_ct"`
}

func (m *TcXdpRevnatMaps) Close() error {
	return _TcXdpRevnatClose(
		m.TupleCt,
	)
}

// TcXdpRevnatPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadTcXdpRevnatObjects or ebpf.CollectionSpec.LoadAndAssign.
type TcXdpRevnatPrograms struct {
	TcXdpRevNat *ebpf.Program `ebpf:"tc_xdp_rev_nat"`
}

func (p *TcXdpRevnatPrograms) Close() error {
	return _TcXdpRevnatClose(
		p.TcXdpRevNat,
	)
}

func _TcXdpRevnatClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed tcxdprevnat_bpfeb.o
var _TcXdpRevnatBytes []byte
