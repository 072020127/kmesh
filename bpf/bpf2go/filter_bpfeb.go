// Code generated by bpf2go; DO NOT EDIT.
// +build arm64be armbe mips mips64 mips64p32 ppc64 s390 s390x sparc sparc64

package bpf2go

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadFilter returns the embedded CollectionSpec for Filter.
func LoadFilter() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_FilterBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load Filter: %w", err)
	}

	return spec, err
}

// LoadFilterObjects loads Filter and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//     *FilterObjects
//     *FilterPrograms
//     *FilterMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadFilterObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadFilter()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// FilterSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilterSpecs struct {
	FilterProgramSpecs
	FilterMapSpecs
}

// FilterSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilterProgramSpecs struct {
	FilterChainManager *ebpf.ProgramSpec `ebpf:"filter_chain_manager"`
	FilterManager      *ebpf.ProgramSpec `ebpf:"filter_manager"`
}

// FilterMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type FilterMapSpecs struct {
	Cluster      *ebpf.MapSpec `ebpf:"cluster"`
	Filter       *ebpf.MapSpec `ebpf:"filter"`
	FilterChain  *ebpf.MapSpec `ebpf:"filter_chain"`
	Route        *ebpf.MapSpec `ebpf:"route"`
	TailCallCtx  *ebpf.MapSpec `ebpf:"tail_call_ctx"`
	TailCallProg *ebpf.MapSpec `ebpf:"tail_call_prog"`
	VirtualHost  *ebpf.MapSpec `ebpf:"virtual_host"`
}

// FilterObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilterObjects struct {
	FilterPrograms
	FilterMaps
}

func (o *FilterObjects) Close() error {
	return _FilterClose(
		&o.FilterPrograms,
		&o.FilterMaps,
	)
}

// FilterMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilterMaps struct {
	Cluster      *ebpf.Map `ebpf:"cluster"`
	Filter       *ebpf.Map `ebpf:"filter"`
	FilterChain  *ebpf.Map `ebpf:"filter_chain"`
	Route        *ebpf.Map `ebpf:"route"`
	TailCallCtx  *ebpf.Map `ebpf:"tail_call_ctx"`
	TailCallProg *ebpf.Map `ebpf:"tail_call_prog"`
	VirtualHost  *ebpf.Map `ebpf:"virtual_host"`
}

func (m *FilterMaps) Close() error {
	return _FilterClose(
		m.Cluster,
		m.Filter,
		m.FilterChain,
		m.Route,
		m.TailCallCtx,
		m.TailCallProg,
		m.VirtualHost,
	)
}

// FilterPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadFilterObjects or ebpf.CollectionSpec.LoadAndAssign.
type FilterPrograms struct {
	FilterChainManager *ebpf.Program `ebpf:"filter_chain_manager"`
	FilterManager      *ebpf.Program `ebpf:"filter_manager"`
}

func (p *FilterPrograms) Close() error {
	return _FilterClose(
		p.FilterChainManager,
		p.FilterManager,
	)
}

func _FilterClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//go:embed filter_bpfeb.o
var _FilterBytes []byte
