From c3fe29a918c97be693dca8608d2fa9f68cedb176 Mon Sep 17 00:00:00 2001
From: kongweibin <kongweibin2@huawei.com>
Date: Sat, 14 Oct 2023 14:38:35 +0800
Subject: [PATCH 7/8] bpf: add strncmp helper function

A helper function is added for character string comparison.

Signed-off-by: kongweibin <kongweibin2@huawei.com>
---
 include/uapi/linux/bpf.h       | 11 +++++++++++
 kernel/bpf/helpers.c           | 16 ++++++++++++++++
 tools/include/uapi/linux/bpf.h | 11 +++++++++++
 3 files changed, 38 insertions(+)

diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index 187404c0b..703c6f124 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -3898,6 +3898,16 @@ union bpf_attr {
  * 		Obtains the length of a character string.
  * 	Return
  * 		Length of the string.
+ *
+ * long bpf__strncmp(const char *s1, u32 s1_sz, const char *s2)
+ *	Description
+ *		Do strncmp() between **s1** and **s2**. **s1** doesn't need
+ *		to be null-terminated and **s1_sz** is the maximum storage
+ *		size of **s1**. **s2** must be a read-only string.
+ *	Return
+ *		An integer less than, equal to, or greater than zero
+ *		if the first **s1_sz** bytes of **s1** is found to be
+ *		less than, to match, or be greater than **s2**.
  */
 #define __BPF_FUNC_MAPPER(FN)		\
 	FN(unspec),			\
@@ -4074,6 +4084,7 @@ union bpf_attr {
 	FN(strncpy),			\
 	FN(strnstr),			\
 	FN(strnlen),			\
+	FN(_strncmp),			\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
diff --git a/kernel/bpf/helpers.c b/kernel/bpf/helpers.c
index 6e03fbb42..af0861af2 100644
--- a/kernel/bpf/helpers.c
+++ b/kernel/bpf/helpers.c
@@ -694,6 +694,20 @@ const struct bpf_func_proto bpf_strncpy_proto = {
 	.arg3_type	= ARG_ANYTHING,
 };
 
+BPF_CALL_3(bpf__strncmp, const char *, s1, u32, s1_sz, const char *, s2)
+{
+	return strncmp(s1, s2, s1_sz);
+}
+
+const struct bpf_func_proto bpf__strncmp_proto = {
+	.func		= bpf__strncmp,
+	.gpl_only	= false,
+	.ret_type	= RET_INTEGER,
+	.arg1_type	= ARG_ANYTHING,
+	.arg2_type	= ARG_ANYTHING,
+	.arg3_type	= ARG_ANYTHING,
+};
+
 const struct bpf_func_proto bpf_get_current_task_proto __weak;
 const struct bpf_func_proto bpf_probe_read_user_proto __weak;
 const struct bpf_func_proto bpf_probe_read_user_str_proto __weak;
@@ -752,6 +766,8 @@ bpf_base_func_proto(enum bpf_func_id func_id)
 		return &bpf_strncpy_proto;
 	case BPF_FUNC_strnstr:
 		return &bpf_strnstr_proto;
+	case BPF_FUNC__strncmp:
+		return &bpf__strncmp_proto;
 	default:
 		break;
 	}
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index 187404c0b..703c6f124 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -3898,6 +3898,16 @@ union bpf_attr {
  * 		Obtains the length of a character string.
  * 	Return
  * 		Length of the string.
+ *
+ * long bpf__strncmp(const char *s1, u32 s1_sz, const char *s2)
+ *	Description
+ *		Do strncmp() between **s1** and **s2**. **s1** doesn't need
+ *		to be null-terminated and **s1_sz** is the maximum storage
+ *		size of **s1**. **s2** must be a read-only string.
+ *	Return
+ *		An integer less than, equal to, or greater than zero
+ *		if the first **s1_sz** bytes of **s1** is found to be
+ *		less than, to match, or be greater than **s2**.
  */
 #define __BPF_FUNC_MAPPER(FN)		\
 	FN(unspec),			\
@@ -4074,6 +4084,7 @@ union bpf_attr {
 	FN(strncpy),			\
 	FN(strnstr),			\
 	FN(strnlen),			\
+	FN(_strncmp),			\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
-- 
2.33.0

