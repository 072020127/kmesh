From 6a1d535cdf4ce994084f7bf36089e866aa46a0c7 Mon Sep 17 00:00:00 2001
From: kongweibin <kongweibin2@huawei.com>
Date: Fri, 13 Oct 2023 18:12:12 +0800
Subject: [PATCH 6/8] bpf: Introduce the string processing helper

Currently, some character strings need to be processed in the ebpf
function. Some character string helper processing functions, such
as strlen and strnstr, need to be introduced.

Signed-off-by: kongweibin <kongweibin2@huawei.com>
---
 include/uapi/linux/bpf.h       | 23 +++++++++++++++++
 kernel/bpf/helpers.c           | 47 ++++++++++++++++++++++++++++++++++
 tools/include/uapi/linux/bpf.h | 43 +++++++++++++++++++++++--------
 3 files changed, 103 insertions(+), 10 deletions(-)

diff --git a/include/uapi/linux/bpf.h b/include/uapi/linux/bpf.h
index 0ac3b2af3..187404c0b 100644
--- a/include/uapi/linux/bpf.h
+++ b/include/uapi/linux/bpf.h
@@ -3878,6 +3878,26 @@ union bpf_attr {
  *		Check the ipaddr is local address or not.
  *	Return
  *		1 is local address, 0 is not.
+ *
+ * void *bpf_strncpy(char *dst, u32 dst_size, char *src)
+ * Description
+ * 		Copies a string that starts with the src address and ends with the
+ * 		NULL character to the address space that starts with dst.
+ * 	Return
+ * 		Returns a apointer to dst. 
+ *
+ * void *bpf_strnstr(void *s1, void *s2, u32 size)
+ * 	Description
+ * 		Search for s2 in the first position character string os s1.
+ * 	Return
+ * 		If s2 exists, returns the position of s2 in s1. If s2 is not found,
+ * 		return NULL.
+ *
+ * u64 bpf_strnlen(char *buff, u32 size)
+ * 	Description
+ * 		Obtains the length of a character string.
+ * 	Return
+ * 		Length of the string.
  */
 #define __BPF_FUNC_MAPPER(FN)		\
 	FN(unspec),			\
@@ -4051,6 +4071,9 @@ union bpf_attr {
 	FN(cpumask_op),			\
 	FN(cpus_share_cache),		\
 	FN(is_local_ipaddr),		\
+	FN(strncpy),			\
+	FN(strnstr),			\
+	FN(strnlen),			\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
diff --git a/kernel/bpf/helpers.c b/kernel/bpf/helpers.c
index 5fccf3319..6e03fbb42 100644
--- a/kernel/bpf/helpers.c
+++ b/kernel/bpf/helpers.c
@@ -653,6 +653,47 @@ const struct bpf_func_proto bpf_this_cpu_ptr_proto = {
 	.arg1_type	= ARG_PTR_TO_PERCPU_BTF_ID,
 };
 
+BPF_CALL_2(bpf_strnlen, void *, src, size_t, len)
+{
+	return strnlen(src, len);
+}
+
+const struct bpf_func_proto bpf_strnlen_proto = {
+	.func		= bpf_strnlen,
+	.gpl_only	= false,
+	.ret_type	= RET_INTEGER,
+	.arg1_type	= ARG_ANYTHING,
+	.arg2_type	= ARG_ANYTHING,
+};
+
+BPF_CALL_3(bpf_strnstr, void *, s1, void *, s2, size_t, len)
+{
+	return strnstr(s1, s2, len);
+}
+
+const struct bpf_func_proto bpf_strnstr_proto = {
+	.func		= bpf_strnstr,
+	.gpl_only	= false,
+	.ret_type	= RET_PTR_TO_ALLOC_MEM_OR_NULL,
+	.arg1_type	= ARG_ANYTHING,
+	.arg2_type	= ARG_ANYTHING,
+	.arg3_type	= ARG_ANYTHING,
+};
+
+BPF_CALL_3(bpf_strncpy, void *, dst, u32, dst_size, void *, src)
+{
+	return strncpy(dst, src, dst_size);
+}
+
+const struct bpf_func_proto bpf_strncpy_proto = {
+	.func		= bpf_strncpy,
+	.gpl_only	= false,
+	.ret_type	= RET_PTR_TO_ALLOC_MEM_OR_NULL,
+	.arg1_type	= ARG_ANYTHING,
+	.arg2_type	= ARG_ANYTHING,
+	.arg3_type	= ARG_ANYTHING,
+};
+
 const struct bpf_func_proto bpf_get_current_task_proto __weak;
 const struct bpf_func_proto bpf_probe_read_user_proto __weak;
 const struct bpf_func_proto bpf_probe_read_user_str_proto __weak;
@@ -705,6 +746,12 @@ bpf_base_func_proto(enum bpf_func_id func_id)
 		return &bpf_sched_tg_tag_of_proto;
 	case BPF_FUNC_sched_task_tag_of:
 		return &bpf_sched_task_tag_of_proto;
+	case BPF_FUNC_strnlen:
+		return &bpf_strnlen_proto;
+	case BPF_FUNC_strncpy:
+		return &bpf_strncpy_proto;
+	case BPF_FUNC_strnstr:
+		return &bpf_strnstr_proto;
 	default:
 		break;
 	}
diff --git a/tools/include/uapi/linux/bpf.h b/tools/include/uapi/linux/bpf.h
index 584d20c56..187404c0b 100644
--- a/tools/include/uapi/linux/bpf.h
+++ b/tools/include/uapi/linux/bpf.h
@@ -2169,8 +2169,8 @@ union bpf_attr {
  *
  * 			# sysctl kernel.perf_event_max_stack=<new value>
  * 	Return
- * 		A non-negative value equal to or less than *size* on success,
- * 		or a negative error in case of failure.
+ * 		The non-negative copied *buf* length equal to or less than
+ * 		*size* on success, or a negative error in case of failure.
  *
  * long bpf_skb_load_bytes_relative(const void *skb, u32 offset, void *to, u32 len, u32 start_header)
  * 	Description
@@ -3454,8 +3454,8 @@ union bpf_attr {
  *
  *			# sysctl kernel.perf_event_max_stack=<new value>
  *	Return
- *		A non-negative value equal to or less than *size* on success,
- *		or a negative error in case of failure.
+ * 		The non-negative copied *buf* length equal to or less than
+ * 		*size* on success, or a negative error in case of failure.
  *
  * long bpf_load_hdr_opt(struct bpf_sock_ops *skops, void *searchby_res, u32 len, u64 flags)
  *	Description
@@ -3871,13 +3871,33 @@ union bpf_attr {
  *	Description
  *		check src_cpu whether share cache with dst_cpu.
  *	Return
- *		true yes, false no.
+ *		yes 1, no 0.
  *
  * long bpf_is_local_ipaddr(u32 ipaddr)
- *     Description
- *             Check the ipaddr is local address or not.
- *     Return
- *             1 is local address, 0 is not.
+ *	Description
+ *		Check the ipaddr is local address or not.
+ *	Return
+ *		1 is local address, 0 is not.
+ *
+ * void *bpf_strncpy(char *dst, u32 dst_size, char *src)
+ * Description
+ * 		Copies a string that starts with the src address and ends with the
+ * 		NULL character to the address space that starts with dst.
+ * 	Return
+ * 		Returns a apointer to dst. 
+ *
+ * void *bpf_strnstr(void *s1, void *s2, u32 size)
+ * 	Description
+ * 		Search for s2 in the first position character string os s1.
+ * 	Return
+ * 		If s2 exists, returns the position of s2 in s1. If s2 is not found,
+ * 		return NULL.
+ *
+ * u64 bpf_strnlen(char *buff, u32 size)
+ * 	Description
+ * 		Obtains the length of a character string.
+ * 	Return
+ * 		Length of the string.
  */
 #define __BPF_FUNC_MAPPER(FN)		\
 	FN(unspec),			\
@@ -4050,7 +4070,10 @@ union bpf_attr {
 	FN(sched_entity_to_tg),		\
 	FN(cpumask_op),			\
 	FN(cpus_share_cache),		\
-	FN(is_local_ipaddr),            \
+	FN(is_local_ipaddr),		\
+	FN(strncpy),			\
+	FN(strnstr),			\
+	FN(strnlen),			\
 	/* */
 
 /* integer value in 'imm' field of BPF_CALL instruction selects which helper
-- 
2.33.0

